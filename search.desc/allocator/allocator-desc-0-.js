searchState.loadedDescShard("allocator", 0, "Various allocator algorithms in a unified interface.\nThe error type used for allocation.\nA <code>Result</code> type with <code>AllocError</code> as the error type.\nA byte-allocator wrapped in <code>Rc&lt;RefCell&gt;</code> that implements …\nThe base allocator inherited by other allocators.\nA page-granularity memory allocator based on the …\nA byte-granularity memory allocator based on the …\nByte-granularity allocator.\nContains the error value\nUsed to allocate unique IDs (e.g., thread ID).\nInvalid <code>size</code> or <code>align_pow2</code>. (e.g. unaligned)\nMemory added by <code>add_memory</code> overlapped with existed memory.\nNo enough memory to allocate.\nDeallocate an unallocated memory region.\nContains the success value\nThe size of a memory page.\nPage-granularity allocator.\nA byte-granularity memory allocator based on the slab …\nA TLSF (Two-Level Segregated Fit) memory allocator.\nAdd a free memory region to the allocator.\nAllocate memory with the given size (in bytes) and …\nMark the given <code>id</code> has been allocated and cannot be …\nAllocate contiguous IDs with given count and alignment.\nAllocate contiguous memory pages with given count and …\nAllocate contiguous memory pages with given base address, …\nAllocate pages at a specific address.\nReturns the number of available IDs.\nReturns available memory size in bytes.\nReturns the number of available memory pages.\nDeallocate memory at the given position, size, and …\nDeallocate contiguous IDs with given position and count.\nDeallocate contiguous memory pages with given position and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the allocator with a free memory region.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the given <code>id</code> was allocated.\nCreates a new empty <code>BitmapPageAllocator</code>.\nCreates a new empty <code>BuddyByteAllocator</code>.\nCreates a new empty <code>SlabByteAllocator</code>.\nCreates a new empty <code>TlsfByteAllocator</code>.\nCreates a new allocator with the given memory pool.\nReturns the maximum number of supported IDs.\nReturns total memory size in bytes.\nReturns the total number of memory pages.\nReturns the number of allocated IDs.\nReturns allocated memory size in bytes.\nReturns the number of allocated memory pages.")